from django.db import models
from django.contrib.auth.models import User, Permission
from common.models import CommonModel
from organizations.models import Organization
from django.core.validators import MinLengthValidator, RegexValidator
from django.utils.translation import ugettext_lazy as _

class Event(CommonModel):
    name = models.CharField(max_length=100, unique=True)
    commercial_name = models.CharField(max_length=150, unique=True)
    prefix = models.CharField(max_length=4, unique=True)
    active = models.BooleanField('active', default=True)
    organizations = models.ManyToManyField(Organization, through='EventMembership', related_name="events")
    start_date = models.DateTimeField('Start datetime')
    end_date = models.DateTimeField('End datetime')
    def __unicode__(self):
        return self.name

class EventRole(CommonModel):
    event = models.ForeignKey(Event, related_name="organizaion_roles")
    name = models.CharField(max_length=100, validators=[ \
        MinLengthValidator(4), \
        RegexValidator( \
            regex="^[a-z0-9_]+$", \
            message=_("Organization role name must be a string with just letters and number without spaces") \
            ) \
        ])
    caption = models.CharField(max_length=100, validators=[ \
            MinLengthValidator(4) \
        ])
    permissions = models.ManyToManyField(Permission, blank=True)
    class Meta:
        unique_together = (("name", "event"),("caption", "event"),)
    def __unicode__(self):
        return self.caption

class EventMembership(models.Model):
    event = models.ForeignKey(Event)
    organization = models.ForeignKey(Organization, related_name="event_role")
    roles = models.ManyToManyField(EventRole)
    creation_date = models.DateTimeField('creation datetime', auto_now_add=True)
    modified_date = models.DateTimeField('modified datetime', auto_now=True)
    class Meta:
        unique_together = (("event", "organization"),)
    def __unicode__(self):
        return "%s in %s" % (self.organization.name, self.event.name)
        
def create_event(sender, instance, created, **kwargs):
    if created:
        EventRole.objects.create( \
                user_creator=instance.user_creator, \
                user_last_modified=instance.user_last_modified, \
                organization=instance, \
                name="organizer", \
                caption="Organizer", \
            )
        EventRole.objects.create( \
                user_creator=instance.user_creator, \
                user_last_modified=instance.user_last_modified, \
                organization=instance, \
                name="seller", \
                caption="Seller", \
            )
        EventRole.objects.create( \
                user_creator=instance.user_creator, \
                user_last_modified=instance.user_last_modified, \
                organization=instance, \
                name="ticket_checker", \
                caption="Ticket checker", \
            )
           
models.signals.post_save.connect(create_event, sender=Event)

# Create your models here.
